name: Auto-close non-English issues

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read
  actions: read
  models: read

jobs:
  detect-language:
    runs-on: ubuntu-latest
    name: Detect and close non-English issues

    steps:
      - name: Extract issue data
        id: prepare
        uses: actions/github-script@v8
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) {
              core.setOutput('should_continue', 'false');
              return;
            }

            const { number, title, body, user } = issue;

            // Skip detection for bot accounts
            if (user?.type === 'Bot') {
              console.log('Skipping bot user issue');
              core.setOutput('should_continue', 'false');
              return;
            }

            const fullText = `${title ?? ''}\n\n${body ?? ''}`.trim();

            if (fullText.length < 20) {
              console.log('Issue text too short for reliable detection');
              core.setOutput('should_continue', 'false');
              return;
            }

            core.setOutput('should_continue', 'true');
            core.setOutput('issue_number', number);
            core.setOutput('issue_text', fullText);

      - name: Detect language using OpenAI
        id: detect
        if: steps.prepare.outputs.should_continue == 'true'
        uses: actions/ai-inference@v2
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            You are a language detection system. Determine if the provided text is written in English.

            Rules:
            1. Ignore markdown headers and code blocks.
            2. Ignore error logs or technical output.
            3. Consider technical terms and URLs as neutral.
            4. Focus on the user's description only.
            5. Return only JSON with two fields:
               {
                 "is_english": true|false,
                 "detected_language": "English"|"Italian"|"Spanish"|...
               }
            6. If unsure, set "detected_language": "undefined".
          prompt: |
            Analyze this issue text and detect the language:

            ${{ steps.prepare.outputs.issue_text }}
          max-tokens: 50

      - name: Handle AI result
        if: steps.prepare.outputs.should_continue == 'true'
        uses: actions/github-script@v8
        env:
          AI_RESPONSE: ${{ steps.detect.outputs.response }}
          ISSUE_NUMBER: ${{ steps.prepare.outputs.issue_number }}
        with:
          script: |
            const issueNumber = Number(process.env.ISSUE_NUMBER);
            const aiResponse = process.env.AI_RESPONSE?.trim() ?? '';

            console.log('AI raw response:', aiResponse);

            let languageResult;
            try {
              languageResult = JSON.parse(aiResponse);
              if (typeof languageResult.is_english !== 'boolean') throw new Error('Missing is_english field');
            } catch (err) {
              core.warning(`Invalid AI response: ${err.message}`);
              return;
            }

            if (languageResult.is_english || !languageResult.detected_language || languageResult.detected_language === 'undefined') {
              console.log('Issue considered English or undefined ‚Äî skipping.');
              return;
            }

            const detectedLang = languageResult.detected_language;
            console.log(`Detected non-English issue: ${detectedLang}`);

            const commentBody = [
              '<!-- workflow: auto-close-non-english -->',
              '### üåê Non-English issue detected',
              '',
              `This issue appears to be written in **${detectedLang}** rather than English.`,
              '',
              'The Firefly Luciferin project uses English to make collaboration easier across our global community.',
              '',
              '**Please:**',
              '1. Recreate this issue in English.',
              '2. You can use translation tools (e.g., Google Translate) or AI assistants to help.',
              '',
              'Thank you for helping us keep communication clear for all contributors! üôè'
            ].join('\n');

            try {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: issueNumber,
                body: commentBody,
              });

              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issueNumber,
                labels: ['non-english'],
              });

              await github.rest.issues.update({
                ...context.repo,
                issue_number: issueNumber,
                state: 'closed',
                state_reason: 'not_planned',
              });

              console.log('Issue commented, labeled, and closed.');
            } catch (error) {
              core.error(`Failed to process issue: ${error.message}`);
              if (error.status === 403) {
                core.error('Likely permissions issue or rate limit.');
              }
            }
